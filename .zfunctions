# Easy Extraction
extract ()
  {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2) tar fxj "$1" ;;
            *.tar.gz) tar fzx "$1" ;;
            *.bz2) bunzip "$1" ;;
            *.gz) gunzip "$1" ;;
            *.tar) tar xf "$1" ;;
            *.tbz2) tar fxj "$1" ;;
            *.tgz) tar fzx "$1" ;;
            *.zip) unzip "$1" ;;
            *.Z) uncompress "$1" ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file."
    fi
  }

# SSH Tunnel
tunnel ()
  {
    if [ ! $# -gt 1 ]; then
        echo "Usage: tunnel <tunnel-host> <[user@]tunnel-gateway> [remote-port] [local-port]"
    else
        TUNNEL_HOST="$1"
        TUNNEL_GATEWAY="$2"
        if [ ! "$3" ]; then
            REMOTE_PORT="3306"
        else
            REMOTE_PORT="$3"
        fi
        if [ ! "$4" ]; then
            LOCAL_PORT="$REMOTE_PORT"
        else
            LOCAL_PORT="$4"
        fi
        echo ssh -C -N -L $LOCAL_PORT:$TUNNEL_HOST:$REMOTE_PORT $TUNNEL_GATEWAY | pbcopy
        echo 'Remote tunnel command copied to clipboard.'
    fi
  }
# AWS Instances
aws_instances ()
  {
    local output="table"
    local filters profile o_profile o_output o_filters

    zparseopts -D -- p:=o_profile -profile:=o_profile o:=o_output -output:=o_output f:=o_filters -filters:=o_filters

    if [[ -n $o_profile[2] ]]; then profile=(--profile $o_profile[2]); fi
    if [[ -n $o_filters[2] ]]; then filters=(--filters $o_filters[2]); fi
    if [[ -n $o_output[2] ]]; then output=($o_output[2]); fi

    aws ec2 describe-instances $profile $filters --query "Reservations[*].Instances[*].{Name:Tags[?Key=='Name']|[0].Value,InstanceId:InstanceId,PublicIp:PublicIpAddress,PrivateIp:PrivateIpAddress,Type:InstanceType,State:State.Name,Zone:Placement.AvailabilityZone}" --output "$output"
  }

# DB Instances
db_instanes ()
  {
    local output="table"
    local filters profile o_profile o_output o_filters

    zparseopts -D -- p:=o_profile -profile:=o_profile o:=o_output -output:=o_output f:=o_filters -filters:=o_filters

    if [[ -n $o_profile[2] ]]; then profile=(--profile $o_profile[2]); fi
    if [[ -n $o_filters[2] ]]; then filters=(--filters $o_filters[2]); fi
    if [[ -n $o_output[2] ]]; then output=($o_output[2]); fi

    aws rds describe-db-instances $profile $filters --query "DBInstances[*].{Size:DBInstanceClass,Engine:Engine,Endpoint:Endpoint.Address,Version:EngineVersion,AZ:MultiAZ,Status:DBInstanceStatus,Name:DBInstanceIdentifier}" --output "$output"
  }
